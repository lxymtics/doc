import{e as n}from"./app.7d2ff5c0.js";import{_ as s}from"./plugin-vue_export-helper.5a098b48.js";const a={},p=n('<h1 id="泛型程序设计" tabindex="-1"><a class="header-anchor" href="#泛型程序设计" aria-hidden="true">#</a> 泛型程序设计</h1><h2 id="引入泛型" tabindex="-1"><a class="header-anchor" href="#引入泛型" aria-hidden="true">#</a> 引入泛型</h2><p>假如我们有一个运算工具类<code>Operates</code> , 通过这个类的静态方法可以实现两个整数的加减法, 如下所示:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Operates</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> i<span class="token operator">+</span>j<span class="token punctuation">;</span><span class="token punctuation">}</span>\n\t<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> i<span class="token operator">-</span>j<span class="token punctuation">;</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>很显然, 这个运算只能作用于整数类型<code>int</code> , 如果日后我们想要对浮点类型进行如上功能的实现, 则需要重新编写一个类:</p><div class="language-Java ext-Java line-numbers-mode"><pre class="language-Java"><code>class Operates {\n    public static double add(double i, double j){return i+j;}\n\tpublic static double sub(double i, double j){return i-j;}\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>仔细观察这两个类, 似乎除了变量的类型发生了变化之外, 好像没有任何其他的变化.</p><p>如果我们采用了泛型程序设置, 则可以只编写一个类的代码, 我们不指明具体的数据类型是<code>int</code> 还是<code>double</code> , 而用一个名称代替它. 而当别人想用这些功能时, 只需自己提供需要的类型便可:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 用T表示类型</span>\n<span class="token keyword">class</span> <span class="token class-name">Operates</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">T</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">T</span> i<span class="token punctuation">,</span> <span class="token class-name">T</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> i<span class="token operator">+</span>j<span class="token punctuation">;</span><span class="token punctuation">}</span>\n\t<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">T</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token class-name">T</span> i<span class="token punctuation">,</span> <span class="token class-name">T</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> i<span class="token operator">-</span>j<span class="token punctuation">;</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 使用时: (T会自动被替换成int)</span>\n<span class="token class-name">Operates</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span> op <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Operates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> result <span class="token operator">=</span> op<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="使用泛型" tabindex="-1"><a class="header-anchor" href="#使用泛型" aria-hidden="true">#</a> 使用泛型</h2><h3 id="在集合中使用泛型" tabindex="-1"><a class="header-anchor" href="#在集合中使用泛型" aria-hidden="true">#</a> 在集合中使用泛型</h3><p>假如没有泛型, 则假如现在要求保存一组学生的成绩, 有如下代码:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n* 在集合中使用泛型之前的情况\n*/</span>\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 需求: 存放学生的成绩</span>\n    <span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n    <span class="token comment">// 问题一: 类型不安全</span>\n    <span class="token comment">// 编译器不会报错, 执行也不会报错</span>\n    <span class="token comment">// list.add(&quot;Tom&quot;);</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> score <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 问题二: 强转时, 可能出现ClassCastException</span>\n        <span class="token keyword">int</span> stuScore <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> score<span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stuScore<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>该代码有两个问题, 如上面的注释所示, 主要是类型方面的错误, 而如果采用泛型机制, 则可以避免这种问题:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n* 在集合中使用泛型之后的情况\n*/</span>\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 需求: 存放学生的成绩</span>\n    <span class="token comment">// 后面的Integer可以省略不写</span>\n    <span class="token comment">// &lt;E&gt;必须是非基本数据类型</span>\n    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n    <span class="token comment">// 如果类型出错, 无法通过编译</span>\n    <span class="token comment">// list.add(&quot;Tom&quot;);</span>\n\n\n    <span class="token comment">// 输出一</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> integer <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// 输出二</span>\n    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Integer</span> next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h3 id="在比较器中使用泛型" tabindex="-1"><a class="header-anchor" href="#在比较器中使用泛型" aria-hidden="true">#</a> 在比较器中使用泛型</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;BB&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;CC&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;AA&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DD&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> o1<span class="token punctuation">;</span>\n            <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> o2<span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token operator">-</span>s1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;Type Error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>用泛型机制:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 泛型, 从小到大</span>\n<span class="token comment">// 主要变化: 类别由Object变成了具体的类型, 不用进行类别判断</span>\n<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">String</span> o1<span class="token punctuation">,</span> <span class="token class-name">String</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="在自定类-接口-中使用泛型" tabindex="-1"><a class="header-anchor" href="#在自定类-接口-中使用泛型" aria-hidden="true">#</a> 在自定类(接口)中使用泛型</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 声明时用了一个类型T</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Utils</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n    \n    <span class="token comment">// 构造器不需要类型参数</span>\n    <span class="token keyword">public</span> <span class="token class-name">Utils</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        \n    <span class="token punctuation">}</span>\n    \n    <span class="token comment">// 之后可以把T当成一个类型来用</span>\n    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">T</span> t1<span class="token punctuation">,</span> <span class="token class-name">T</span> t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> t1 <span class="token operator">+</span> t2<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>如果继承自泛型类, 有两种情况:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 情况一: </span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UtilPlus</span> <span class="token keyword">extends</span> <span class="token class-name">Utils</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 这样的话, 如果UtilPlus不是泛型类</span>\n<span class="token punctuation">}</span> \n\n<span class="token comment">// 声明时: 不用带类型</span>\n<span class="token class-name">UtilPlus</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UtilPlus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 情况二:</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UtilPlus</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Utils</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n    <span class="token comment">// UtilPlus是泛型类</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="在自定方法中使用泛型" tabindex="-1"><a class="header-anchor" href="#在自定方法中使用泛型" aria-hidden="true">#</a> 在自定方法中使用泛型</h3><h2 id="泛型说明" tabindex="-1"><a class="header-anchor" href="#泛型说明" aria-hidden="true">#</a> 泛型说明</h2><ul><li><p>泛型如果不指定, 将被擦除, 泛型对应的类型均按照Object处理, 但不等价于Object</p></li><li><p>经验: 泛型要使用就一路都用. 要不用, 就一路都不用</p></li><li><p><strong>静态方法中不能使用泛型</strong>, 这是因为静态方法早于类被加载于内存中</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Utils</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n    <span class="token comment">// 不可以</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//...</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>异常类不能使用泛型</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 不可以</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h2 id="反射机制" tabindex="-1"><a class="header-anchor" href="#反射机制" aria-hidden="true">#</a> 反射机制</h2><h3 id="什么是反射" tabindex="-1"><a class="header-anchor" href="#什么是反射" aria-hidden="true">#</a> 什么是反射</h3><p>我们之前是怎么创建一个类的实例的?</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>而反射是另一种创建对象的方式.</p><h3 id="实现反射的三种方式" tabindex="-1"><a class="header-anchor" href="#实现反射的三种方式" aria-hidden="true">#</a> 实现反射的三种方式</h3><p>假如我们有一个包<code>com.people</code> , 在这个包中有许多不同的类: <code>Employee</code> , <code>Manager</code> :</p><h4 id="第一种方法" tabindex="-1"><a class="header-anchor" href="#第一种方法" aria-hidden="true">#</a> 第一种方法</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 实现反射的方式一:</span>\n<span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.people.Employee&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>第一种方式就是调用Class类的静态方法<code>forName</code> , 这个方法的参数是一个类名**(必须包含完整的包名)**, 它返回一个<code>Class</code> 类实例, 我们可以通过这个类实例来创建它对应类类型的对象:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.people.Employee&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 通过newInstance方法创建了一个实例</span>\n<span class="token class-name">Employee</span> e <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>你的代码工具可能会提醒你<code>newInstance</code> 方法已经被弃用了, <strong><strong>关于这个将在以后提到.</strong></strong></p><h4 id="第二种方法" tabindex="-1"><a class="header-anchor" href="#第二种方法" aria-hidden="true">#</a> 第二种方法</h4><p><code>Object</code> 对象有一个方法<code>getClass()</code> , 这个方法可以返回一个<code>Class</code> 类实例, 也就是说, 假如我们想获取<code>Employee</code> 类对应的<code>Class</code> 实例, 只需用一个<code>Employee</code> 类的实例调用这个方法就可以了:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Employee</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Class</span> c <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="第三种方法" tabindex="-1"><a class="header-anchor" href="#第三种方法" aria-hidden="true">#</a> 第三种方法</h4><p>第三种方法和第二种方法类似, 同样对一个类实例进行操作:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Employee</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">e<span class="token punctuation">.</span></span>Class</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="数据和代码分离" tabindex="-1"><a class="header-anchor" href="#数据和代码分离" aria-hidden="true">#</a> 数据和代码分离</h3><h4 id="为什么要用反射" tabindex="-1"><a class="header-anchor" href="#为什么要用反射" aria-hidden="true">#</a> 为什么要用反射</h4><p>我们可以看到, 上面用反射创建实例的例子中:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> className <span class="token operator">=</span> <span class="token string">&quot;com.people.Employee&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">Class</span> c <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Object</span> e <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>我们只用修改className这个字符串, 就可以改变之后生成的e的类型了. 现在假如我们把这个类型的名字保存在一个外部文件中, 而在程序中通过某种方式读取这个字符串, 那是不是意味着, 即使我们的代码已经固定了, 或者已经编译好了, 那么只要修改这个外部文件, 就可以修改所生成的类了呢?</p><p>我们在src目录下创建一个<code>test.properties</code> 文件, 文件内容如下:</p><div class="language-none ext-none line-numbers-mode"><pre class="language-none"><code>className=com.people.Employee\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>同时, 修改我们的Java代码:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">FileReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;test.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Properties</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\np<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>\nreader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> className <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;className&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这样当我们下次想换成创建<code>Manager</code> 类实例时, 不需要重新编译或修改源代码, 只需修改配置文件就可以了.</p><p>反射使得代码更加灵活.</p><p>之前我们创建类实例的方式很死板, 我们的源代码是写死的. 这也就是说, 我们编译后, 每次运行到这里, Java虚拟机闭着眼都知道创建的肯定是这个类的实例.</p><p>而通过反射, 则可以&quot;动态地&quot;选择程序在运行到某个地方时要实例化的是哪种类:</p><p>反射机制在许多框架中都有使用, 我们只需要修改外部的配置文件, 就可以将大型框架跑起来, 在外部配置文件里保存的一些内容可能就是反射要用到的数据. 之后学习到的JDBC中就有用到反射机制.</p><h4 id="获取绝对路径" tabindex="-1"><a class="header-anchor" href="#获取绝对路径" aria-hidden="true">#</a> 获取绝对路径</h4><p>在<code>IDEA</code> 中, 代码的默认起始位置是Module的根目录, 也就是说, 假如有如下的文件结构:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>-- Module\n\t-- src\n\t\t-- com.people\n\t\t\t-- Emloyee.java\n\t\t\t-- Manager.java\n\t\t-- test.properties\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>获取<code>test.properties</code> 这个文件的路径就是<code>./test.properties</code> , 但是, 如果我们之后不用IDEA了, 用Eclipse打开这个项目, 可能就会发现代码跑不动了, 这就是由于文件路径引起的, 我们下面介绍几种通用的可以获取到正确路径的方法:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 方式一: </span>\n<span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">&quot;test.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 解释:</span>\n<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//获取当前线程对象</span>\n<span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 获取到当前线程的类加载器对象</span>\n<span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 获取资源, 当前线程的类加载器默认从类的根路径下加载资源</span>\n\n<span class="token comment">// 要求:</span>\n<span class="token comment">// 资源文件在当前类的类路径下(也就是src文件下)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="获取配置文件" tabindex="-1"><a class="header-anchor" href="#获取配置文件" aria-hidden="true">#</a> 获取配置文件</h4>',64);var e=s(a,[["render",function(n,s){return p}]]);export{e as default};
